// Copyright 2022 MobiledgeX, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Dynamic Location Group APIs

syntax = "proto3";
package distributed_match_engine;

import "google/api/annotations.proto";
import "appcommon.proto";

message DlgMessage {
  uint32 ver = 1;
  // Dynamic Location Group Id
  uint64 lg_id = 2;
  // Group Cookie if secure
  string group_cookie = 3;
  // Message ID
  uint64 message_id = 4;
  // Need acknowledgement
  enum DlgAck {
    DLG_ACK_EACH_MESSAGE = 0;
    DLG_ASY_EVERY_N_MESSAGE = 1;
    DLG_NO_ACK = 2;
  }
  DlgAck ack_type = 5;
  // Message
  string message = 6;
}

message DlgReply {
  uint32 ver = 1;
  // AckId
  uint64 ack_id = 2;
  // Group Cookie for Secure comm
  string group_cookie = 3;
}

message DynamicLocGroupRequest {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Session Cookie from RegisterClientRequest
  string session_cookie = 2;
  // Dynamic Location Group Id
  uint64 lg_id = 3;
  // Use Secure communication or Open with the group
  enum DlgCommType {
    DLG_UNDEFINED = 0;
    DLG_SECURE = 1;
    DLG_OPEN = 2;
  }
  DlgCommType comm_type = 11;
  // Unused
  string user_data = 12;
  // _(removed)_ Cell id where the client is
  reserved "cell_id";
  reserved 13;
  // _(optional)_ Vendor specific data
  map<string, string> tags = 100;
}

message DynamicLocGroupReply {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Status of the reply
  ReplyStatus status = 2;
  // Error Code based on Failure
  uint32 error_code = 3;
  // Group Cookie for Secure Group Communication
  string group_cookie = 5;
  // _(optional)_ Vendor specific data
  map<string, string> tags = 100;
}

service DynamicLocGroupApi {
  rpc SendToGroup(DlgMessage) returns (DlgReply) {}
  rpc AddUserToGroup(DynamicLocGroupRequest) returns (DynamicLocGroupReply) {
    option (google.api.http) = {
      post: "/v1/addusertogroup"
      body: "*"
    };
  }
}
