// Copyright 2022 MobiledgeX, Inc
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Device service APIs

syntax = "proto3";
package distributed_match_engine;

import "google/api/annotations.proto";
import "loc.proto";
import "appcommon.proto";

enum IDTypes {
  ID_UNDEFINED = 0;
  IMEI = 1;
  MSISDN = 2;
  IPADDR = 3;
}

message FindCloudletRequest {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  /*
   * Session Cookie
   *
   * Session Cookie from RegisterClientRequest
   */
  string session_cookie = 2;
  /*
   * Carrier Name
   *
   * _(optional)_ By default, all SDKs will automatically fill in this parameter with the MCC+MNC of your current provider. Only override this parameter if you need to filter for a specific carrier on the DME. The DME will filter for App instances that are associated with the specified carrier.
   * If you wish to search for any App Instance on the DME regardless of carrier name, you can input “” to consider all carriers as “Any”.
   */
  string carrier_name = 3;
  /*
   * GPS Location
   *
   * The GPS location of the user
   */
  Loc gps_location = 4;
  /*
   * Cell ID
   *
   * _(removed)_ Cell ID where the client is
   */
  reserved "cell_id";
  reserved 8;
  /*
   * Tags
   *
   * _(optional)_ Vendor specific data
   */
  map<string, string> tags = 100;
}

message PlatformFindCloudletRequest {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  /*
   * Session Cookie
   *
   * Session Cookie from RegisterClientRequest
   */
  string session_cookie = 2;
  /*
   * Carrier Name
   *
   * _(optional)_ By default, all SDKs will automatically fill in this parameter with the MCC+MNC of your current provider. Only override this parameter if you need to filter for a specific carrier on the DME. The DME will filter for App instances that are associated with the specified carrier.
   * If you wish to search for any app instance on the DME regardless of carrier name, you can input “” to consider all carriers as “Any”.
   */
  string carrier_name = 3;
  /*
   * Client Token
   *
   * Token with encoded client data
   */
  string client_token = 4;
  /*
   * Tags
   *
   * _(optional)_ Vendor specific data
   */
  map<string, string> tags = 100;
}

message FindCloudletReply {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  enum FindStatus {
    FIND_UNKNOWN = 0;
    FIND_FOUND = 1;
    FIND_NOTFOUND = 2;
  }
  // Status return
  FindStatus status = 2;
  // Fully Qualified Domain Name of the Closest App instance
  string fqdn = 3;
  // List of Service Endpoints for AppInst
  repeated AppPort ports = 4;
  // Location of the cloudlet
  Loc cloudlet_location = 5;
  // Session Cookie for specific EdgeEvents for specific AppInst
  string edge_events_cookie = 6;

  enum QosSessionResult {
    QOS_NOT_ATTEMPTED = 0;
    QOS_SESSION_CREATED = 1;
    QOS_SESSION_FAILED = 2;
  }
  // Result of QOS priority session creation attempt
  QosSessionResult qos_result = 7; 
  // Error message in case of QOS_SESSION_FAILED
  string qos_error_msg = 8;
  // _(optional)_ Vendor specific data
  map<string, string> tags = 100;
}

message AppInstListRequest {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Session Cookie from RegisterClientRequest
  string session_cookie = 2;
  /*
   * Carrier Name
   *
   * _(optional)_ By default, all SDKs will automatically fill in this parameter with the MCC+MNC of your current provider. Only override this parameter if you need to filter for a specific carrier on the DME. The DME will filter for App instances that are associated with the specified carrier.
   * If you wish to search for any App Instance on the DME regardless of carrier name, you can input “” to consider all carriers as “Any”.
   */
  string carrier_name = 3;
  // The GPS location of the user
  Loc gps_location = 4;
  // _(removed)_ Cell id where the client is
  reserved "cell_id";
  reserved 5;
  // _(optional)_ Limit the number of results, defaults to 3
  uint32 limit = 6;
  // _(optional)_ Vendor specific data
  map<string, string> tags = 100;
}

message Appinstance{
  // App Instance Name
  string app_name = 1;
  // App Instance Version
  string app_vers = 2;
  // App Instance FQDN
  string fqdn = 3;
  // ports to access app
  repeated AppPort ports = 4;
  // App Organization Name
  string org_name = 5;
  // Session Cookie for specific EdgeEvents for specific AppInst
  string edge_events_cookie = 6;
}

message CloudletLocation {
  // Cloudlet Organization Name
  string carrier_name = 1;
  // Cloudlet Name
  string cloudlet_name = 2;
  // The GPS Location of the cloudlet
  Loc gps_location = 3;
  // Distance of cloudlet vs loc in request
  double distance = 4;
  // App instances
  repeated Appinstance appinstances = 5;
}

message AppInstListReply {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Status of the reply
  enum AIStatus {
    AI_UNDEFINED = 0;
    AI_SUCCESS = 1;
    AI_FAIL = 2;
  }
  AIStatus status = 2;
  repeated CloudletLocation cloudlets = 3;
  // _(optional)_ Vendor specific data
  map<string, string> tags = 100;
}

message FqdnListRequest {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Session Cookie from RegisterClientRequest
  string session_cookie = 2;
  // _(removed)_ Cell id where the client is
  reserved "cell_id";
  reserved 3;
  // _(optional)_ Vendor specific data
  map<string, string> tags = 100;
}

message AppFqdn{
  // App  Name
  string app_name = 1;
  // App Version
  string app_vers = 2;
  // App organization name
  string org_name = 3;
  // App FQDN
  repeated string fqdns = 4;
  // _(optional)_ Android package name
  string android_package_name = 5;
}

message FqdnListReply{
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Status of the reply
  enum FLStatus {
    FL_UNDEFINED = 0;
    FL_SUCCESS = 1;
    FL_FAIL = 2;
  }
  repeated AppFqdn app_fqdns = 3;
  FLStatus status = 4;
  // _(optional)_ Vendor specific data
  map<string, string> tags = 100;
}

message AppOfficialFqdnRequest {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Session Cookie from RegisterClientRequest
  string session_cookie = 2;
  // The GPS location of the user
  Loc gps_location = 3;
  // _(optional)_ Vendor specific data
  map<string, string> tags = 100;
}

message AppOfficialFqdnReply{
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // The FQDN to which the app is reached independent of the edge
  string app_official_fqdn = 2;
  // Tokenized client data
  string client_token = 3;
  enum AOFStatus {
    AOF_UNDEFINED = 0;
    AOF_SUCCESS = 1;
    AOF_FAIL = 2;
  }
  // Status of the reply
  AOFStatus status = 4;
  // List of Service Endpoints for AppInst
  repeated AppPort ports = 5;
  // _(optional)_ Vendor specific data
  map<string, string> tags = 100;
}

// Messages from SDK to DME
message ClientEdgeEvent {
  // Session Cookie from RegisterClientReply
  string session_cookie = 1;
  // Session Cookie from FindCloudletReply 
  string edge_events_cookie = 2;
  enum ClientEventType {
    EVENT_UNKNOWN = 0;
    EVENT_INIT_CONNECTION = 1;
    EVENT_TERMINATE_CONNECTION = 2;
    EVENT_LATENCY_SAMPLES = 3;
    EVENT_LOCATION_UPDATE = 4;
    EVENT_CUSTOM_EVENT = 5;
  }
  ClientEventType event_type = 3;
  // GPS Location info if event_type is EVENT_LOCATION_UPDATE or EVENT_LATENCY_SAMPLES
  Loc gps_location = 4;
  // Latency Samples if event_type is EVENT_LATENCY_SAMPLES or EVENT_CUSTOM_EVENT
  repeated Sample samples = 5;
  /* 
   * _(optional)_ Static device information for latency and deviceinfo stats 
   * Send on EVENT_INIT_CONNECTION to get this information in latency stats and deviceinfo stats
   */ 
  DeviceInfoStatic device_info_static = 6;
  /*
   * _(optional)_ Dynamic device information for latency and deviceinfo stats
   * Send on EVENT_INIT_CONNECTION to get this information in first deviceinfo stat
   * Send on EVENT_LOCATION_UPDATE to get this information in dynamic deviceinfo stats
   * Send on EVENT_LATENCY_SAMPLES to get this information in latency stats
   */
  DeviceInfoDynamic device_info_dynamic = 7;
  // Custom event specified by the application
  string custom_event = 8;
  // _(optional)_ Vendor specific data
  map<string, string> tags = 100;
}

// Message from DME to SDK
message ServerEdgeEvent {
  enum ServerEventType {
    EVENT_UNKNOWN = 0;
    EVENT_INIT_CONNECTION = 1;
    EVENT_LATENCY_REQUEST = 2;
    EVENT_LATENCY_PROCESSED = 3;
    EVENT_CLOUDLET_STATE = 4;
    EVENT_CLOUDLET_MAINTENANCE = 5;
    EVENT_APPINST_HEALTH = 6;
    EVENT_CLOUDLET_UPDATE = 7;
    EVENT_ERROR = 8;
  }
  ServerEventType event_type = 1;
  // Cloudlet state information if cloudlet state is not CLOUDLET_STATE_READY
  CloudletState cloudlet_state = 2;
  // Cloudlet maintenance state information if maintenance state is not NORMAL_OPERATION
  MaintenanceState maintenance_state = 3;
  // AppInst health state information if health check is not HEALTH_CHECK_OK
  HealthCheck health_check = 4;
  // Summarized RTT Latency stats from samples provided from client if event_type is EVENT_LATENCY
  Statistics statistics = 5;
  /* 
   * New and closer cloudlet if event_type is EVENT_CLOUDLET_UPDATE.
   * (EVENT_CLOUDLET_UPDATE occurs if the client is closer to a different cloudlet, or a new closer appinst is created, or a previously down appinst/cloudlet that is closest to the client is now operational)
   * Also sent on EVENT_CLOUDLET_STATE if another cloudlet is available
   * Also sent on EVENT_CLOUDLET_MAINTENANCE, if another cloudlet is available and maintenance_state == UNDER_MAINTENANCE
   * Also sent on EVENT_APPINST_HEALTH, if another cloudlet is available and health_check != HEALTH_CHECK_UNKNOWN
   */
  FindCloudletReply new_cloudlet = 6;
  // Error message if event_type is EVENT_ERROR
  string error_msg = 7;
  // _(optional)_ Vendor specific data
  map<string, string> tags = 100;
}

service MatchEngineApi {
  /*
   * FindCloudlet
   *
   * Locates the most optimal edge computing footprint and allows the
   * registered application to find the application backend by leveraging the
   * location, application subscription, and service provider agreement. If
   * there are no suitable cloudlet instances available, the client may connect
   * to the application server located in the public cloud.
   */
   rpc FindCloudlet(FindCloudletRequest) returns (FindCloudletReply) {
    option (google.api.http) = {
      post: "/v1/findcloudlet"
      body: "*"
    };
  }
  /*
   * PlatformFindCloudlet
   *
   * Similar to FindCloudlet, except uses a token for client data.
   * This API is only applicable for Platform Applications.
   */
  rpc PlatformFindCloudlet(PlatformFindCloudletRequest) returns (FindCloudletReply) {
    option (google.api.http) = {
      post: "/v1/platformfindcloudlet"
      body: "*"
    };
  }
  rpc GetAppInstList(AppInstListRequest) returns (AppInstListReply) {
    option (google.api.http) = {
      post: "/v1/getappinstlist"
      body: "*"
    };
  }
  rpc GetFqdnList(FqdnListRequest) returns (FqdnListReply) {
    option (google.api.http) = {
      post: "/v1/getfqdnlist"
      body: "*"
    };
  }
  rpc GetAppOfficialFqdn(AppOfficialFqdnRequest) returns (AppOfficialFqdnReply) {
    option (google.api.http) = {
      post: "/v1/getappofficialfqdn"
      body: "*"
    };
  }
  rpc StreamEdgeEvent(stream ClientEdgeEvent) returns (stream ServerEdgeEvent) {
    option (google.api.http) = {
      post: "/v1/streamedgeevent"
      body: "*"
    };
  }
}
